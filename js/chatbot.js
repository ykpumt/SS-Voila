// SS Voila Chatbot System
class Chatbot {
    constructor() {
        this.isOpen = false;
        this.messages = [];
        this.responses = {
            greetings: [
                "Merhaba! SS Voila'ya ho≈ü geldiniz! Size nasƒ±l yardƒ±mcƒ± olabilirim? üòä",
                "Selam! SS Voila m√º≈üteri hizmetleri burada. Ne ile ilgili yardƒ±ma ihtiyacƒ±nƒ±z var?",
                "Merhaba! Size yardƒ±mcƒ± olmaktan mutluluk duyarƒ±m. Sorunuzu sorabilirsiniz! üëã"
            ],
            products: [
                "√úr√ºnlerimiz hakkƒ±nda detaylƒ± bilgi i√ßin shop sayfamƒ±zƒ± ziyaret edebilirsiniz. Hangi kategoriyle ilgileniyorsunuz?",
                "Ti≈ü√∂rt, g√∂mlek, ≈üort ve set √ºr√ºnlerinde geni≈ü se√ßeneklerimiz var. √ñzel bir √ºr√ºn m√º arƒ±yorsunuz?",
                "Premium kalitede erkek giyim √ºr√ºnlerimiz var. Size en uygun √ºr√ºn√º bulmak i√ßin yardƒ±mcƒ± olabilirim!"
            ],
            sizing: [
                "üìè Beden rehberimiz:\n\nS: 86-91 cm (g√∂ƒü√ºs)\nM: 96-101 cm (g√∂ƒü√ºs)\nL: 106-111 cm (g√∂ƒü√ºs)\nXL: 116-121 cm (g√∂ƒü√ºs)\nXXL: 126-131 cm (g√∂ƒü√ºs)\n\nDetaylƒ± √∂l√ß√ºler i√ßin √ºr√ºn sayfalarƒ±nƒ± kontrol edebilirsiniz!",
                "Beden konusunda kararsƒ±zsanƒ±z, m√º≈üteri hizmetlerimizle ileti≈üime ge√ßebilirsiniz. Size en uygun bedeni bulmak i√ßin yardƒ±mcƒ± oluruz!"
            ],
            shipping: [
                "üöö Kargo bilgileri:\n\n‚Ä¢ √úcretsiz kargo: 299‚Ç∫ ve √ºzeri sipari≈ülerde\n‚Ä¢ Standart kargo: 1-3 i≈ü g√ºn√º\n‚Ä¢ Hƒ±zlƒ± kargo: Aynƒ± g√ºn teslimat (ƒ∞stanbul i√ßin)\n‚Ä¢ Kargo √ºcreti: 29.90‚Ç∫",
                "Kargolamada MNG, Yurti√ßi ve Aras kargo se√ßeneklerimiz bulunuyor. Hangi ili tercih edersiniz?"
            ],
            returns: [
                "üîÑ ƒ∞ade ko≈üullarƒ±mƒ±z:\n\n‚Ä¢ 14 g√ºn i√ßinde √ºcretsiz iade\n‚Ä¢ √úr√ºn etiketli ve kullanƒ±lmamƒ±≈ü olmalƒ±\n‚Ä¢ ƒ∞ade kargo √ºcreti tarafƒ±mƒ±zdan kar≈üƒ±lanƒ±r\n‚Ä¢ Para iadesi 3-5 i≈ü g√ºn√º i√ßinde",
                "ƒ∞ade i≈ülemi i√ßin sipari≈ü numaranƒ±zla birlikte m√º≈üteri hizmetlerimizle ileti≈üime ge√ßebilirsiniz."
            ],
            payment: [
                "üí≥ √ñdeme se√ßenekleri:\n\n‚Ä¢ Kredi kartƒ± (Visa, MasterCard, Troy)\n‚Ä¢ Kapƒ±da √∂deme\n‚Ä¢ Havale/EFT\n‚Ä¢ 6 aya varan taksit imkanƒ±",
                "G√ºvenli √∂deme altyapƒ±mƒ±zla t√ºm kartlarƒ±nƒ±zƒ± g√ºvenle kullanabilirsiniz."
            ],
            discounts: [
                "üéØ Aktif kampanyalar:\n\n‚Ä¢ Yeni √ºyelere %15 indirim (HOSGELDIN15)\n‚Ä¢ 2. √ºr√ºn %30 indirim\n‚Ä¢ Set √ºr√ºnlerde %20 indirim\n‚Ä¢ √úcretsiz kargo 299‚Ç∫ √ºzeri",
                "√ñzel indirim kodlarƒ± i√ßin b√ºltenimize abone olabilirsiniz!"
            ],
            contact: [
                "üìû Bize ula≈üƒ±n:\n\nTelefon: 0850 xxx xx xx\nE-posta: info@ssvoila.com\nWhatsApp: 0555 xxx xx xx\n\nM√º≈üteri hizmetleri: Pazartesi-Cuma 09:00-18:00",
                "Sosyal medya hesaplarƒ±mƒ±zdan da bize ula≈üabilirsiniz! Instagram: @ssvoila"
            ]
        };
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadChatHistory();
    }

    setupEventListeners() {
        // Enter key for input
        const input = document.getElementById('chatbotInput');
        if (input) {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.sendMessage();
                }
            });
        }

        // Auto-show chatbot after 10 seconds
        setTimeout(() => {
            if (!this.isOpen && !localStorage.getItem('chatbot_shown')) {
                this.showNotification();
                localStorage.setItem('chatbot_shown', 'true');
            }
        }, 10000);
    }

    showNotification() {
        const notification = document.getElementById('chatNotification');
        if (notification) {
            notification.style.display = 'block';
            notification.classList.add('pulse');
        }
    }

    hideNotification() {
        const notification = document.getElementById('chatNotification');
        if (notification) {
            notification.style.display = 'none';
            notification.classList.remove('pulse');
        }
    }

    sendMessage() {
        const input = document.getElementById('chatbotInput');
        const message = input.value.trim();
        
        if (message === '') return;

        this.addMessage(message, 'user');
        input.value = '';

        // Show typing indicator
        this.showTyping();

        // Generate response after delay
        setTimeout(() => {
            this.hideTyping();
            const response = this.generateResponse(message);
            this.addMessage(response, 'bot');
        }, 1000 + Math.random() * 1000);
    }

    sendQuickReply(message) {
        this.addMessage(message, 'user');
        
        setTimeout(() => {
            const response = this.generateResponse(message);
            this.addMessage(response, 'bot');
        }, 800);
    }

    addMessage(text, sender) {
        const messagesContainer = document.getElementById('chatbotMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;

        if (sender === 'bot') {
            messageDiv.innerHTML = `
                <div class="message-avatar">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H19C20.11 23 21 22.11 21 21V9M19 9H14V4H19V9Z" fill="currentColor"/>
                    </svg>
                </div>
                <div class="message-content">
                    <p>${text.replace(/\n/g, '<br>')}</p>
                    <span class="message-time">${new Date().toLocaleTimeString('tr-TR', {hour: '2-digit', minute: '2-digit'})}</span>
                </div>
            `;
        } else {
            messageDiv.innerHTML = `
                <div class="message-content">
                    <p>${text}</p>
                    <span class="message-time">${new Date().toLocaleTimeString('tr-TR', {hour: '2-digit', minute: '2-digit'})}</span>
                </div>
            `;
        }

        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // Save to chat history
        this.messages.push({ text, sender, timestamp: Date.now() });
        this.saveChatHistory();
    }

    showTyping() {
        const messagesContainer = document.getElementById('chatbotMessages');
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot-message typing-indicator';
        typingDiv.id = 'typingIndicator';
        typingDiv.innerHTML = `
            <div class="message-avatar">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H19C20.11 23 21 22.11 21 21V9M19 9H14V4H19V9Z" fill="currentColor"/>
                </svg>
            </div>
            <div class="message-content">
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;
        messagesContainer.appendChild(typingDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    hideTyping() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    generateResponse(message) {
        const lowercaseMessage = message.toLowerCase();

        // Greeting responses
        if (this.containsWords(lowercaseMessage, ['merhaba', 'selam', 'hey', 'hi', 'hello'])) {
            return this.getRandomResponse('greetings');
        }

        // Product related
        if (this.containsWords(lowercaseMessage, ['√ºr√ºn', 'ti≈ü√∂rt', 'g√∂mlek', '≈üort', 'polo', 'set', 'koleksiyon'])) {
            return this.getRandomResponse('products');
        }

        // Size related
        if (this.containsWords(lowercaseMessage, ['beden', 'boyut', '√∂l√ß√º', 'size', 'b√ºy√ºk', 'k√º√ß√ºk'])) {
            return this.getRandomResponse('sizing');
        }

        // Shipping related
        if (this.containsWords(lowercaseMessage, ['kargo', 'teslimat', 'g√∂nderi', 'nakliye', 'ne zaman'])) {
            return this.getRandomResponse('shipping');
        }

        // Return related
        if (this.containsWords(lowercaseMessage, ['iade', 'deƒüi≈üim', 'geri', 'return'])) {
            return this.getRandomResponse('returns');
        }

        // Payment related
        if (this.containsWords(lowercaseMessage, ['√∂deme', 'kredi kartƒ±', 'kart', 'taksit', 'kapƒ±da'])) {
            return this.getRandomResponse('payment');
        }

        // Discount related
        if (this.containsWords(lowercaseMessage, ['indirim', 'kampanya', 'kupon', 'kod', 'promosyon'])) {
            return this.getRandomResponse('discounts');
        }

        // Contact related
        if (this.containsWords(lowercaseMessage, ['ileti≈üim', 'telefon', 'mail', 'ula≈ü', 'kontak'])) {
            return this.getRandomResponse('contact');
        }

        // Default responses
        const defaultResponses = [
            "Bu konuda size yardƒ±mcƒ± olmak i√ßin m√º≈üteri hizmetlerimizle ileti≈üime ge√ßmenizi √∂neriyorum. üìû",
            "Sorunuzu daha detaylƒ± a√ßƒ±klayabilir misiniz? Size daha iyi yardƒ±mcƒ± olabilmek i√ßin. ü§î",
            "Bu konu hakkƒ±nda detaylƒ± bilgi i√ßin m√º≈üteri hizmetlerimizi arayabilirsiniz: 0850 xxx xx xx",
            "Anlayamadƒ±ƒüƒ±m bir soru. L√ºtfen daha a√ßƒ±k bir ≈üekilde sorabilir misiniz? üòä"
        ];

        return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
    }

    containsWords(text, words) {
        return words.some(word => text.includes(word));
    }

    getRandomResponse(category) {
        const responses = this.responses[category];
        return responses[Math.floor(Math.random() * responses.length)];
    }

    saveChatHistory() {
        localStorage.setItem('chatbot_history', JSON.stringify(this.messages.slice(-20))); // Keep last 20 messages
    }

    loadChatHistory() {
        const history = localStorage.getItem('chatbot_history');
        if (history) {
            this.messages = JSON.parse(history);
            // Load only recent messages to UI
            const messagesContainer = document.getElementById('chatbotMessages');
            if (messagesContainer && this.messages.length > 1) {
                // Clear default message and load history
                messagesContainer.innerHTML = '';
                this.messages.forEach(msg => {
                    this.addMessageToUI(msg.text, msg.sender);
                });
            }
        }
    }

    addMessageToUI(text, sender) {
        const messagesContainer = document.getElementById('chatbotMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;

        if (sender === 'bot') {
            messageDiv.innerHTML = `
                <div class="message-avatar">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H19C20.11 23 21 22.11 21 21V9M19 9H14V4H19V9Z" fill="currentColor"/>
                    </svg>
                </div>
                <div class="message-content">
                    <p>${text.replace(/\n/g, '<br>')}</p>
                </div>
            `;
        } else {
            messageDiv.innerHTML = `
                <div class="message-content">
                    <p>${text}</p>
                </div>
            `;
        }

        messagesContainer.appendChild(messageDiv);
    }
}

// Global functions for HTML onclick events
function toggleChatbot() {
    const widget = document.getElementById('chatbotWidget');
    const toggle = document.getElementById('chatbotToggle');
    
    if (chatbot.isOpen) {
        widget.classList.remove('open');
        toggle.classList.remove('active');
        chatbot.isOpen = false;
    } else {
        widget.classList.add('open');
        toggle.classList.add('active');
        chatbot.isOpen = true;
        chatbot.hideNotification();
        
        // Focus input when opened
        setTimeout(() => {
            const input = document.getElementById('chatbotInput');
            if (input) input.focus();
        }, 300);
    }
}

function sendMessage() {
    if (window.chatbot) {
        window.chatbot.sendMessage();
    }
}

function sendQuickReply(message) {
    if (window.chatbot) {
        window.chatbot.sendQuickReply(message);
    }
}

// Initialize chatbot
document.addEventListener('DOMContentLoaded', function() {
    window.chatbot = new Chatbot();
}); 